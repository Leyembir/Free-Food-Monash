{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./AppStyles\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { Card } from \"@rneui/themed\";\nimport axios from \"axios\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState({\n      monday: {\n        time: [],\n        event_name: [],\n        location: []\n      },\n      tuesday: {\n        time: [],\n        event_name: [],\n        location: []\n      },\n      wednesday: {\n        time: [],\n        event_name: [],\n        location: []\n      },\n      thursday: {\n        time: [],\n        event_name: [],\n        location: []\n      },\n      friday: {\n        time: [],\n        event_name: [],\n        location: []\n      }\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    scheduleData = _useState2[0],\n    setScheduleData = _useState2[1];\n  var currentDate = new Date().toLocaleString(\"en-US\", {\n    timeZone: \"Australia/Sydney\"\n  });\n  var currentDay = new Intl.DateTimeFormat('en-US', {\n    weekday: 'long',\n    timeZone: 'Australia/Sydney'\n  }).format(new Date()).toLowerCase();\n  var currentHour = new Date(currentDate).getHours();\n  var openGoogleMaps = function openGoogleMaps(location) {\n    var query = encodeURIComponent(location);\n    console.log(\"Original query:\", query);\n    if (query.toLowerCase() === \"boob%20lawn\") {\n      query = \"-37.9109535387807, 145.13193000867986\";\n      var url = \"http://www.google.com/maps/place/\" + query;\n      Linking.openURL(url);\n      console.log(\"URL:\", url);\n    } else {\n      var _url = \"https://www.google.com/maps/search/?api=1&query=\" + query;\n      Linking.openURL(_url);\n      console.log(\"URL:\", _url);\n    }\n  };\n  var isCurrentEvent = function isCurrentEvent(eventTime, eventDay) {\n    var timeParts = eventTime.split('-');\n    if (timeParts.length !== 2) return false;\n    var startHour = timeParts[0] && parseInt(timeParts[0]);\n    var endHour = timeParts[1] && parseInt(timeParts[1]);\n    if (timeParts[0] && timeParts[0].includes('pm') && startHour !== 12) startHour += 12;\n    if (timeParts[1] && timeParts[1].includes('pm') && endHour !== 12) endHour += 12;\n    return currentDay === eventDay && currentHour >= startHour && currentHour < endHour;\n  };\n  useEffect(function () {\n    var fetchScheduleData = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var response = yield axios.get('http://127.0.0.1:8000/json-object');\n          setScheduleData(response.data);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      });\n      return function fetchScheduleData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchScheduleData();\n  }, []);\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsx(ScrollView, {\n      contentContainerStyle: {\n        paddingVertical: 16\n      },\n      children: Object.entries(scheduleData).map(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          day = _ref3[0],\n          data = _ref3[1];\n        return _jsxs(View, {\n          style: {\n            marginBottom: 18,\n            backgroundColor: 'white'\n          },\n          children: [_jsx(View, {\n            style: {\n              alignItems: 'center'\n            },\n            children: _jsx(Text, {\n              style: {\n                fontSize: 24,\n                fontWeight: 'bold'\n              },\n              children: day.charAt(0).toUpperCase() + day.slice(1)\n            })\n          }), data.time.map(function (time, index) {\n            return _jsx(View, {\n              style: {\n                marginBottom: 8,\n                borderRadius: 10,\n                overflow: 'hidden',\n                backgroundColor: isCurrentEvent(time, day) ? 'green' : 'transparent'\n              },\n              children: _jsxs(Card, {\n                children: [_jsx(Card.Title, {\n                  children: time\n                }), _jsx(Card.Divider, {}), _jsx(Text, {\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: data.event_name[index]\n                }), _jsx(TouchableOpacity, {\n                  onPress: function onPress() {\n                    return openGoogleMaps(data.location[index]);\n                  },\n                  children: _jsx(Text, {\n                    style: {\n                      color: 'blue',\n                      textDecorationLine: 'underline'\n                    },\n                    children: data.location[index]\n                  })\n                })]\n              })\n            }, index);\n          })]\n        }, day);\n      })\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","styles","SafeAreaView","View","Text","ScrollView","TouchableOpacity","Linking","Card","axios","jsx","_jsx","jsxs","_jsxs","App","_useState","monday","time","event_name","location","tuesday","wednesday","thursday","friday","_useState2","_slicedToArray","scheduleData","setScheduleData","currentDate","Date","toLocaleString","timeZone","currentDay","Intl","DateTimeFormat","weekday","format","toLowerCase","currentHour","getHours","openGoogleMaps","query","encodeURIComponent","console","log","url","openURL","isCurrentEvent","eventTime","eventDay","timeParts","split","length","startHour","parseInt","endHour","includes","fetchScheduleData","_ref","_asyncToGenerator","response","get","data","error","apply","arguments","style","container","children","contentContainerStyle","paddingVertical","Object","entries","map","_ref2","_ref3","day","marginBottom","backgroundColor","alignItems","fontSize","fontWeight","charAt","toUpperCase","slice","index","borderRadius","overflow","Title","Divider","onPress","color","textDecorationLine"],"sources":["C:/Users/amir0/freeFoodMonasNew/FreeFoodMonash/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styles from \"./AppStyles\";\nimport {\n  SafeAreaView,\n  View,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n  Linking,\n} from \"react-native\";\nimport { Card, withTheme } from \"@rneui/themed\";\nimport axios from \"axios\";\nimport { color } from \"@rneui/themed/dist/config\";\nconst App = () => {\n  const [scheduleData, setScheduleData] = useState({\n    monday: { time: [], event_name: [], location: [] },\n    tuesday: { time: [], event_name: [], location: [] },\n    wednesday: { time: [], event_name: [], location: [] },\n    thursday: { time: [], event_name: [], location: [] },\n    friday: { time: [], event_name: [], location: [] },\n  });\n\n\n  const currentDate = new Date().toLocaleString(\"en-US\", { timeZone: \"Australia/Sydney\" });\n  const currentDay = new Intl.DateTimeFormat('en-US', { weekday: 'long', timeZone: 'Australia/Sydney' }).format(new Date()).toLowerCase();\n  const currentHour = new Date(currentDate).getHours();\n\n\n\n\n  //opens up google maps with the location of the event\n  const openGoogleMaps = (location: string | number | boolean) => {\n    let query = encodeURIComponent(location);\n\n    console.log(\"Original query:\", query); // Debug statement 1\n\n    if (query.toLowerCase() === \"boob%20lawn\") {\n      // Updated check\n      query = \"-37.9109535387807, 145.13193000867986\";\n      const url = `http://www.google.com/maps/place/${query}`;\n      Linking.openURL(url);\n      console.log(\"URL:\", url); // Debug statement 2\n    } else {\n      const url = `https://www.google.com/maps/search/?api=1&query=${query}`;\n      Linking.openURL(url);\n      console.log(\"URL:\", url); // Debug statement 3\n    }\n  };\n  const isCurrentEvent = (eventTime, eventDay) => {\n    const timeParts = eventTime.split('-');\n    if (timeParts.length !== 2) return false; // Ensure there are start and end times\n\n    let startHour = timeParts[0] && parseInt(timeParts[0]);\n    let endHour = timeParts[1] && parseInt(timeParts[1]);\n\n    // Adjust for AM/PM\n    if (timeParts[0] && timeParts[0].includes('pm') && startHour !== 12) startHour += 12;\n    if (timeParts[1] && timeParts[1].includes('pm') && endHour !== 12) endHour += 12;\n\n    return currentDay === eventDay && currentHour >= startHour && currentHour < endHour;\n};\n\n\n  \n  //fetches the data from the server\n  useEffect(() => {\n    const fetchScheduleData = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/json-object');\n        setScheduleData(response.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n\n\n\n\n    fetchScheduleData();\n  }, []); // Empty dependency array ensures it runs only once when the component mounts\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView contentContainerStyle={{ paddingVertical: 16 }}>\n        {/* Render the schedule for each day */}\n        {Object.entries(scheduleData).map(([day, data]) => (\n          <View key={day} style={{ marginBottom: 18, backgroundColor:'white'}}>\n            {/* Center the day's title */}\n            <View style={{ alignItems: 'center' }}>\n              <Text style={{ fontSize: 24, fontWeight: 'bold' }}>\n                {day.charAt(0).toUpperCase() + day.slice(1)}\n              </Text>\n            </View>\n            {data.time.map((time, index) => (\n              \n              <View\n                key={index}\n                style={{\n                  marginBottom: 8,\n                  borderRadius: 10, // Apply border-radius to make the View rounded\n                  overflow: 'hidden', // Ensure content stays within rounded corners\n                  backgroundColor: isCurrentEvent(time, day) ? 'green' : 'transparent' // Apply conditional styling\n                }}\n              >\n                <Card>\n                  <Card.Title>{time}</Card.Title>\n                  <Card.Divider />\n                  <Text style={{ fontWeight: 'bold' }}>{data.event_name[index]}</Text>\n                  {/* Make the location text clickable */}\n                  <TouchableOpacity onPress={() => openGoogleMaps(data.location[index])}>\n                    <Text style={{ color: 'blue', textDecorationLine: 'underline' }}>\n                      {data.location[index]}\n                    </Text>\n                  </TouchableOpacity>\n                </Card>\n              </View>\n            ))}\n          </View>\n        ))}\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nexport default App;\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}